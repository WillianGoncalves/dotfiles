" Coc is an intellisense engine for Vim

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" use <c-space> to trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" jump to next snippet
inoremap <expr> <c-j> pumvisible() ? "\<c-n>" : "\<c-j>"

" jump to previous snippet
inoremap <expr> <c-k> pumvisible() ? "\<c-p>" : "\<c-k>"

" confirm snippet with CTRL+C[onfirm] or TAB
" <c-c> is useful when there are many options
" and we are navigating with <c-j>/<c-k>
inoremap <expr> <c-c> pumvisible() ? "\<c-y>" : "\<c-c>"

" <TAB> is useful when there are one option,
" or the desired option is the first
inoremap <expr> <TAB> pumvisible() ? "\<c-y>" : "\<TAB>"

" jump to next placeholder on snippet
let g:coc_snippet_next = '<c-n>'

" jump to previous placeholder on snippet
let g:coc_snippet_prev = '<c-p>'

let g:coc_global_extensions = [
  \ 'coc-json',
  \ 'coc-snippets',
  \ 'coc-ultisnips',
  \ 'coc-tsserver',
  \ 'coc-diagnostic',
  \ 'coc-eslint'
  \ ]

inoremap <silent><expr> <down> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1, 1)\<cr>" : "\<down>"
inoremap <silent><expr>  <up>  coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0, 1)\<cr>" :  "\<up>"

" GoTo code navigation.
nmap <silent> gD <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap ]e <plug>(coc-diagnostic-next)
nmap [e <plug>(coc-diagnostic-prev)
nmap <leader>rf <Plug>(coc-refactor)
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf <Plug>(coc-fix-current)

" vim:ft=vim
